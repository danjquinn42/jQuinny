{"version":3,"sources":["webpack:///webpack/bootstrap 3c71101a411e75438c56","webpack:///./lib/main.js"],"names":[],"mappings":";AAAA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA,uBAAe;AACf;AACA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;;;AAGA;AACA;;AAEA;AACA;;AAEA;AACA;;AAEA;AACA;;;;;;;ACtCA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA,IAAG;AACH;AACA;AACA;;AAEA;AACA;AACA;AACA,EAAC;;AAED;AACA;AACA;AACA;AACA;AACA,IAAG;AACH;AACA;;;AAGA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;;AAEA;;AAEA;AACA;AACA;AACA,MAAK;AACL;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA,mBAAkB;AAClB,gBAAe;AACf,qDAAoD;AACpD;AACA;AACA;AACA,kBAAiB;AACjB;AACA;AACA;AACA,MAAK;AACL,sBAAqB;AACrB,oBAAmB;AACnB,aAAY;AACZ;AACA;;;AAGA;AACA","file":"jquinny.js","sourcesContent":[" \t// The module cache\n \tvar installedModules = {};\n\n \t// The require function\n \tfunction __webpack_require__(moduleId) {\n\n \t\t// Check if module is in cache\n \t\tif(installedModules[moduleId])\n \t\t\treturn installedModules[moduleId].exports;\n\n \t\t// Create a new module (and put it into the cache)\n \t\tvar module = installedModules[moduleId] = {\n \t\t\texports: {},\n \t\t\tid: moduleId,\n \t\t\tloaded: false\n \t\t};\n\n \t\t// Execute the module function\n \t\tmodules[moduleId].call(module.exports, module, module.exports, __webpack_require__);\n\n \t\t// Flag the module as loaded\n \t\tmodule.loaded = true;\n\n \t\t// Return the exports of the module\n \t\treturn module.exports;\n \t}\n\n\n \t// expose the modules object (__webpack_modules__)\n \t__webpack_require__.m = modules;\n\n \t// expose the module cache\n \t__webpack_require__.c = installedModules;\n\n \t// __webpack_public_path__\n \t__webpack_require__.p = \"\";\n\n \t// Load entry module and return exports\n \treturn __webpack_require__(0);\n\n\n\n/** WEBPACK FOOTER **\n ** webpack/bootstrap 3c71101a411e75438c56\n **/","import DOMNodeCollection from './dom_node_collection.js';\n\nlet functionQueue = [];\n\nconst jQuinny = (selector) => {\n  switch (typeof selector) {\n    case \"function\":\n      return addToFunctionQueue(selector);\n    case \"string\":\n      const selected = document.querySelectorAll(selector);\n      return new DOMNodeCollection(selected);\n    case \"object\":\n      if (selector instanceof HTMLElement){\n        return new DOMNodeCollection([selector]);\n      }\n  }\n};\n\nconst $ = jQuinny;\n\nconst addToFunctionQueue = (functionForQueue) => {\n  if (document.readyState === \"complete\") {\n    functionQueue();\n  } else {\n    functionQueue.push(functionForQueue);\n  }\n};\n\ndocument.addEventListener('DOMContentLoaded', () => {\n  functionQueue.each((queuedFunction) => queuedFunction());\n  functionQueue = [];\n});\n\njQuinny.extend = ( firstPojo, ...otherPojos) => {\n  otherPojos.forEach( pojo => {\n    for(let prop of pojo){\n      firstPojo[prop] = pojo[prop];\n    }\n  });\n  return firstPojo;\n};\n\n\njQuinny.ajax = (options) => {\n  const defaultAjaxOptions = ajaxDefaults;\n  options = jQuinny.extend(defaultAjaxOptions, options);\n  options.method = options.method.toUpperCase();\n\n  if (options.method === 'GET') {\n    options.url += \"?\" + toQueryString(options.data);\n  }\n\n  const request = new XMLHttpRequest();\n\n  request.open(options.method, options.url, true);\n\n  request.onload = () => {\n    if (request.status === 200) {\n      options.success(request.response);\n    } else {\n      options.error(request.response);\n    }\n  };\n\n  request.send(JSON.stringify(options.data));\n};\n\nconst toQueryString = object => {\n  let result = \"\";\n  for(let property in object){\n    if (object.hasOwnProperty(property)){\n      result += property + \"=\" + object[property] + \"&\";\n    }\n  }\n  return result.substring(0, result.length - 1);\n};\n\nconst ajaxDefaults = () => {\n  return {\n    type: 'html',\n    global: true,\n    statusCode: {},\n    headers: {},\n    contentType: 'application/x-www-form-urlencoded; charset=UTF-8',\n    method: 'GET',\n    url: document.URL,\n    async: true,\n    converters: {\"* text\": window.String,\n      \"text html\": true,\n      \"text json\": jQuery.parseJSON,\n      \"text xml\": jQuery.parseXML\n    },\n    success: () => {},\n    error: () => {},\n    data: {},\n  };\n};\n\n\nwindow.jQuinny = jQuinny;\nexport default jQuinny;\n\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./lib/main.js\n ** module id = 0\n ** module chunks = 0\n **/"],"sourceRoot":""}